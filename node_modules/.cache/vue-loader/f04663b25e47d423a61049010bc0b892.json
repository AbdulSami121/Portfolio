{"remainingRequest":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/src/pages/Home.vue?vue&type=template&id=5a90ec03&","dependencies":[{"path":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/src/pages/Home.vue","mtime":1599986500211},{"path":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lablnet/Muhammad Umer Farooq/Projects/vuejs/lablnet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}